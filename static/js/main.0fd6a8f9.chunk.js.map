{"version":3,"sources":["store/reducers/session.js","store/reducers/utilities.js","store/initialState.js","store/actions/session.js","store/index.js","pages/Header.js","pages/Home.js","pages/About.js","App.js","serviceWorker.js","index.js"],"names":["sessionReducer","initialState","handlers","state","action","Object","prototype","hasOwnProperty","call","type","createReducer","user","accessToken","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","combineReducers","session","applyMiddleware","thunk","useStyles","makeStyles","theme","header","backgroundColor","menuButton","marginRight","spacing","title","flexGrow","item","color","textDecoration","width","withRouter","location","classes","className","AppBar","position","Toolbar","IconButton","edge","aria-label","Typography","variant","to","Button","dispatch","useDispatch","useSelector","Helmet","name","content","onClick","AboutPage","App","basename","process","exact","path","Home","About","Boolean","hostname","match","Root","React","Component","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oSAWaA,ECXgB,SAACC,EAAcC,GAAf,OAA4B,WAAmC,IAAlCC,EAAiC,uDAAzBF,EAAcG,EAAW,uCACzF,OAAIC,OAAOC,UAAUC,eAAeC,KAAKN,EAAUE,EAAOK,MACjDP,EAASE,EAAOK,MAAMN,EAAOC,GAE/BD,GDOqBO,CEVnB,CACPC,KAAM,KACNC,YAAa,MFQ0B,eGXd,iBHMR,SAACT,GAAD,sBAChBA,EADgB,CAEnBQ,KAAM,cIFFE,EAAmBC,OAAOC,sCAAwCC,IAE3DC,EAAQC,YACnBC,YAAgB,CACdC,QAASpB,IAGLa,EAAiBQ,YAAgBC,O,yFCHnCC,EAAYC,aAAW,SAAAC,GAAK,MAAK,CACrCC,OAAQ,CACNC,gBAAiB,eAEnBC,WAAY,CACVC,YAAaJ,EAAMK,QAAQ,IAE7BC,MAAO,CACLC,SAAU,GAEZC,KAAM,CACJC,MAAO,QACPC,eAAgB,OAChBC,MAAO,YA6BIC,eAzBA,SAAC,GAAiB,EAAfC,SAAgB,IAC1BC,EAAUhB,IAEhB,OACE,yBAAKiB,UAAU,UACb,kBAACC,EAAA,EAAD,CAAQC,SAAS,SAASF,UAAWD,EAAQb,QAC3C,kBAACiB,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAYC,KAAK,QAAQL,UAAWD,EAAQX,WAAYM,MAAM,UAAUY,aAAW,QACjF,kBAAC,IAAD,OAEF,kBAACC,EAAA,EAAD,CAAYC,QAAQ,KAAKR,UAAWD,EAAQR,OAA5C,qBAGA,kBAAC,IAAD,CAAMS,UAAWD,EAAQN,KAAMgB,GAAG,KAChC,kBAACC,EAAA,EAAD,CAAQhB,MAAM,WAAd,SAEF,kBAAC,IAAD,CAAMM,UAAWD,EAAQN,KAAMgB,GAAG,UAChC,kBAACC,EAAA,EAAD,CAAQhB,MAAM,WAAd,gB,QClBGG,eAlBE,WACf,IAAMc,EAAWC,cACXhC,EAAUiC,aAAY,qBAAGjC,WAE/B,OACE,yBAAKoB,UAAU,2CACb,kBAACc,EAAA,OAAD,KACE,yDACA,0BAAMC,KAAK,cAAcC,QAAQ,8CAEnC,yBAAKhB,UAAU,6CACb,4CAAkBpB,EAAQT,MAAQ,GAAlC,KACA,kBAACuC,EAAA,EAAD,CAAQF,QAAQ,YAAYS,QAAS,kBAAMN,EHlBhB,CACjC1C,KAH2B,oBGoBrB,mBCLOiD,EAZG,WAChB,OACE,yBAAKlB,UAAU,2CACb,kBAACc,EAAA,OAAD,KACE,0DACA,0BAAMC,KAAK,cAAcC,QAAQ,+CAEnC,gDCcSG,MAlBf,WACE,OACE,yBAAKnB,UAAU,4EACb,kBAAC,IAAD,CAAQoB,SAAUC,cAChB,kBAAC,EAAD,MACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,KAChB,kBAACC,EAAD,CAAMjC,MAAM,UAEd,kBAAC,IAAD,CAAOgC,KAAK,SAAShC,MAAM,SACzB,kBAACkC,EAAD,WCJQC,QACW,cAA7BpD,OAAOwB,SAAS6B,UAEe,UAA7BrD,OAAOwB,SAAS6B,UAEhBrD,OAAOwB,SAAS6B,SAASC,MACvB,2D,ICVAC,E,iLAEF,OACE,kBAAC,IAAD,CAAUpD,MAAOA,GACf,kBAAC,EAAD,W,GAJWqD,IAAMC,WAUzBC,IAASC,OAAO,kBAAC,EAAD,MAAUC,SAASC,eAAe,SDiH5C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.0fd6a8f9.chunk.js","sourcesContent":["import { initialState } from '../initialState'\nimport { createReducer } from './utilities'\nimport * as Actions from '../actions'\n\nconst { session } = initialState\n\nconst resetSession = (state) => ({\n  ...state,\n  user: 'Dream',\n})\n\nexport const sessionReducer = createReducer(session, {\n  [Actions.RESET_SESSION]: resetSession,\n})","export const createReducer = (initialState, handlers) => (state = initialState, action) => {\n  if (Object.prototype.hasOwnProperty.call(handlers, action.type)) {\n    return handlers[action.type](state, action)\n  }\n  return state\n}\n","export const initialState = {\n  session: {\n    user: null,\n    accessToken: null,\n  },\n}\n","export const RESET_SESSION = 'RESET_SESSION'\n\nexport const resetSession = () => ({\n  type: RESET_SESSION,\n})","import { createStore, combineReducers, compose, applyMiddleware } from 'redux'\nimport thunk from 'redux-thunk'\nimport logger from 'redux-logger'\n\nimport { sessionReducer } from './reducers/session'\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\n\nexport const store = createStore(\n  combineReducers({\n    session: sessionReducer,\n  }),\n  (process.env.NODE_ENV === 'development') ? composeEnhancers(applyMiddleware(thunk, logger))\n      : composeEnhancers(applyMiddleware(thunk)),\n)\n","import React from 'react';\nimport { Link, withRouter } from 'react-router-dom';\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\n\nconst useStyles = makeStyles(theme => ({\n  header: {\n    backgroundColor: 'transparent',\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n  title: {\n    flexGrow: 1,\n  },\n  item: {\n    color: \"white\",\n    textDecoration: 'none',\n    width: '6rem',\n  }\n}));\n\nconst Header = ({ location }) => {\n  const classes = useStyles();\n  \n  return (\n    <div className=\"w-full\">\n      <AppBar position=\"static\" className={classes.header}>\n        <Toolbar>\n          <IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\">\n            <MenuIcon />\n          </IconButton>\n          <Typography variant=\"h6\" className={classes.title}>\n            Dreamsoftware SSR\n          </Typography>\n          <Link className={classes.item} to=\"/\">\n            <Button color=\"inherit\">Home</Button>\n          </Link>\n          <Link className={classes.item} to=\"/about\">\n            <Button color=\"inherit\">About</Button>\n          </Link>\n        </Toolbar>\n      </AppBar>\n    </div>\n  );\n}\n\nexport default withRouter(Header)","import React from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { withRouter } from 'react-router-dom'\nimport { Helmet } from 'react-helmet';\nimport { Button } from '@material-ui/core'\n\nimport { resetSession } from 'store/actions'\n\nconst HomePage = () => {\n  const dispatch = useDispatch()\n  const session = useSelector(({ session }) => session)\n\n  return (\n    <div className=\"flex items-center justify-center flex-1\">\n      <Helmet>\n        <title>Generated Home By Code</title>\n        <meta name=\"description\" content=\"Home description is updated by component\" />\n      </Helmet>\n      <div className=\"flex items-center justify-center flex-col\">\n        <h1>Welcome Home {session.user || ''}!</h1>\n        <Button variant=\"contained\" onClick={() => dispatch(resetSession())}>Click Here</Button>\n      </div>\n    </div>\n  )\n}\n\nexport default withRouter(HomePage)","import React from 'react';\nimport { Helmet } from 'react-helmet';\n\nconst AboutPage = () => {\n  return (\n    <div className=\"flex items-center justify-center flex-1\">\n      <Helmet>\n        <title>Generated About By Code</title>\n        <meta name=\"description\" content=\"About description is updated by component\" />\n      </Helmet>\n      <h1>About Us Page!</h1>\n    </div>\n  )\n}\n\nexport default AboutPage","import React from 'react'\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom'\nimport Header from './pages/Header'\nimport Home from './pages/Home'\nimport About from './pages/About'\n\nfunction App() {\n  return (\n    <div className=\"flex flex-col h-full items-center justify-center bg-blue-dark text-white\">\n      <Router basename={process.env.PUBLIC_URL}>\n        <Header />\n        <Switch>\n          <Route exact path=\"/\">\n            <Home title=\"Home\"/>\n          </Route>\n          <Route path=\"/about\" title=\"About\">\n            <About />\n          </Route>\n        </Switch>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux'\nimport { store } from './store'\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nclass Root extends React.Component {\n  render() {\n    return (\n      <Provider store={store}>\n        <App />\n      </Provider>\n    )\n  }\n}\n\nReactDOM.render(<Root />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}